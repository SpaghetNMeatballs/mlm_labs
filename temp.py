from common import sigmoid, sigmoid_dif
from math import sqrt
import matplotlib.pyplot as plt


def normalize(inp_arr: list) -> list:
    out_arr = []
    min_val = inp_arr[0]
    max_val = inp_arr[0]
    for i in range(1, len(inp_arr)):
        if inp_arr[i] < min_val:
            min_val = inp_arr[i]
        if inp_arr[i] > max_val:
            max_val = inp_arr[i]
    for i in range(len(inp_arr)):
        out_arr.append((inp_arr[i] - min_val) / (max_val - min_val))
    return out_arr


cases = [
    [0.378, 0.467, 0.177, 0.271, 0.433, 0.432, 0.464, 0.058, 0.685, 0.783, 0.455, 0.736, 0.302, 0.298, 0.446, 0.313,
     0.001, 0.354, 0.652, 0.22, 0.741, 0.443, 0.256, 0.467, 0.357, 0.211, 0.294, 0.323, 0.229, 0.524, 1, 0.324, 0.724,
     0.314, 0, 0.143, 0.741, 0.569, 0.588, 0.417, 0.223, 0.388, 0.165, 0.44, 0.325, 0.315, 0.415, 0.566],
    [0.431, 0.464, 0.224, 0.289, 0.506, 0.446, 0.501, 0.048, 0.682, 0.682, 0.481, 0.674, 0.498, 0.305, 0.33, 0.286, 0,
     0.316, 0.677, 0.18, 0.591, 0.391, 0.155, 0.431, 0.308, 0.165, 0.219, 0.33, 0.271, 0.629, 1, 0.276, 0.593, 0.14,
     0.092, 0.062, 0.74, 0.635, 0.442, 0.319, 0.333, 0.395, 0.105, 0.396, 0.227, 0.235, 0.53, 0.626],
    [0.616, 0.606, 0.457, 0.421, 0.74, 0.627, 0.74, 0.201, 0.87, 0.568, 0.667, 0.637, 0.904, 0.411, 0.329, 0.417, 0.243,
     0.264, 0.843, 0.308, 0.453, 0.516, 0, 0.522, 0.482, 0.205, 0.264, 0.512, 0.499, 0.872, 1, 0.363, 0.457, 0.164,
     0.491, 0.14, 0.889, 0.956, 0.39, 0.384, 0.618, 0.48, 0.214, 0.501, 0.325, 0.302, 0.843, 0.922],
    [0.612, 0.64, 0.573, 0.466, 0.725, 0.678, 0.795, 0.395, 0.881, 0.444, 0.694, 0.53, 0.85, 0.442, 0.458, 0.538, 0.523,
     0.21, 0.788, 0.486, 0.418, 0.647, 0, 0.575, 0.679, 0.305, 0.405, 0.614, 0.606, 0.773, 0.719, 0.479, 0.393, 0.482,
     0.742, 0.374, 0.845, 1, 0.489, 0.552, 0.647, 0.463, 0.435, 0.593, 0.556, 0.472, 0.829, 0.958],
    [0.557, 0.65, 0.556, 0.438, 0.665, 0.683, 0.796, 0.428, 0.915, 0.464, 0.682, 0.533, 0.69, 0.416, 0.569, 0.582,
     0.589, 0.168, 0.766, 0.551, 0.505, 0.73, 0, 0.611, 0.783, 0.329, 0.48, 0.633, 0.595, 0.668, 0.642, 0.531, 0.449,
     0.703, 0.749, 0.478, 0.856, 1, 0.62, 0.672, 0.56, 0.426, 0.525, 0.649, 0.696, 0.566, 0.747, 0.955],
    [0.512, 0.658, 0.512, 0.402, 0.618, 0.682, 0.793, 0.411, 0.957, 0.526, 0.673, 0.574, 0.554, 0.386, 0.65, 0.598,
     0.582, 0.142, 0.77, 0.571, 0.608, 0.784, 0, 0.638, 0.839, 0.326, 0.519, 0.63, 0.56, 0.599, 0.655, 0.556, 0.531,
     0.841, 0.692, 0.519, 0.892, 1, 0.732, 0.752, 0.471, 0.398, 0.557, 0.686, 0.778, 0.619, 0.679, 0.954],
    [0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1,
     1, 1, 0, 0, 0, 1, 1, 1, 0, 1],
    [1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0,
     0, 0, 1, 1, 1, 0, 0, 0, 1, 0]]

cases_norm = [normalize(stat) for stat in cases]

# wij = w[j-1][i]
w = [[0.03, -0.08, -0.06, 0.02, 0.02, -0.08, -0.07], [0.02, -0.05, -0.01, 0.05, -0.04, -0.01, 0.01], [0.04, 0.01, 0.04],
     [0.07, 0.02, 0.01]]
eras = 400
v = 0.5
s = [0, 0, 0, 0]
errs = []
curvedeltas = [0, 0, 0, 0]
for era in range(eras):
    err = 0
    for case in range(40):
        # Расчёт состояний нейронов
        for neur in range(2):
            s[neur] = w[neur][0] + sum(w[neur][j + 1] * cases[j][case] for j in range(6))
        for neur in range(2, 4):
            s[neur] = w[neur][0] + w[neur][1] * sigmoid(s[0], 2) + w[neur][2] * sigmoid(s[1])
        # Расчёт дельт
        deltas = [cases[6 + j][case] - sigmoid(s[j + 2], 2) for j in range(2)]
        ytilda = [sigmoid_dif(s[i], 2) for i in range(4)]
        # Расчёт неувязок
        for j in range(2, 4):
            curvedeltas[j] = deltas[j - 2] * sigmoid_dif(s[j], 2)
        for i in range(2):
            tempsum = sum(curvedeltas[j] * w[j][i + 1] for j in range(2, 4))
            curvedeltas[i] = tempsum * sigmoid_dif(s[i], 2)
        # Учёт неувязок
        for j in range(2, 4):
            w[j][0] += v * curvedeltas[j]
            for i in range(1, 3):
                w[j][i] += v * ytilda[i + 1] * curvedeltas[j]
        for j in range(2):
            w[j][0] += v * curvedeltas[j]
            for i in range(1, 7):
                w[j][i] += v * cases[i - 1][case] * curvedeltas[j]
        err += (deltas[0] ** 2 + deltas[1] ** 2) / 2
    err /= 40
    err = sqrt(err)
    errs.append(err)
for case in range(40, 48):
    for neur in range(2):
        s[neur] = w[neur][0] + sum(w[neur][j + 1] * cases[j][case] for j in range(6))
    for neur in range(2, 4):
        s[neur] = w[neur][0] + w[neur][1] * sigmoid(s[0], 2) + w[neur][2] * sigmoid(s[1])
    print("%.4f\t%.4f\t%.4f\t%.4f" % (sigmoid(s[2], 2), sigmoid(s[3], 2), cases[6][case], cases[7][case]))

fig, ax1 = plt.subplots(1, 1)
ax1.plot([i for i in range(eras)], errs)
plt.show()
